---
title: 学习python脚本
description: 为非程序员准备的简洁Python语言教材
---

========================
学习python脚本
========================

为非程序员准备的简洁Python语言教材。

本文根据此文 `hashao <http://code.google.com/p/hashao/wiki/ChinesePythonTutor>`__ 改编，去除易度脚本开不需要掌握的知识，加入了易度一些改变。

Python 的中文意思是巨蟒，大蟒蛇。

.. Contents::
.. sectnum::

易度开胃菜
================
不管您懂不懂开发，建议您依葫芦画瓢，先把这个 `hello world教程 <hello.rst>`__ 走完。

这样，我可确认您已经掌握了易度的基本开发环境了。

计算机编程主要概念
=====================================

首先，要明确一点，那就是，编程是不需要任何数理化知识的，最多最多只需要会数数，1，2，3，4，5的往上数。只有在用程序解决数学问题的时候，才会用到数学知识。一般情况下，网络应用，文件处理，分割，数据提取，报表通知这些应用，根本不需要任何数学知识。

计算机语言编程的主要内容就这些：数字，文字，循环，公式，变量

* 数字: 1, 2, 3, 5.6, 120, 32.4, 3.1415926, -3, -0.123，反正是个数都算。 

* 文字: 您好，我好，你太牛了，很黄很暴力，这类的文字。一般用双引号(")或者单引号(')括起来。术语叫字符串 ，就是一堆字符，串起来。 

* 循环: 循环(loop)就是重复的做一件事。计算机是一个很笨的机器，基本上只会做加，减，乘，除，大于，小于，等于和循环这些简单的工作。编程就是把复杂的问题，拆成简单的单元让他重复。 

  循环具体来说，就是先设定一个条件，当条件符合的时候，重复执行一系列操作。直到设定的条件不再符合了，就可以结束循环了。 

  幸亏有下面讲到的公式，所以很多较复杂的问题已经有了解决方法，我们只是重复的套用别人做好的解决公式就可以了，不用拆得太细。 

  Python 语言最大的优势，就是这个语言中包含了大量解决常见问题的公式，您想干的事，基本上都有人帮您干了，您只是需要把他们组织，捆绑起来就可以了。比如下载文件的公式，分析网页内容的公式，压缩文件的公式，处理电子邮件的公式等等。 

* 公式: 就像数学公式 (a+b)2= a2 + 2ab + b2 这种。算的时候带入具体数值，比如：(3+4)2 = 32 + 2*3*4 + 42 = 9+24+16 = 49 。前面的 (a+b)2 就是我们的公式名，当然编程时，我们会用一些比较容易明白的词组做为公式名，比如“和的平方”这种，英语或者拼音都可以，他需要两个参数a，b；后面的 a2 + 2ab + b2 是具体怎么算出来的步骤，这就是我们的公式内容。 

  当然在编程的时候，我们的所谓公式不是数学公式，所有没有甚么数学推导，推论之类的玩意儿。只是把我们想做的操作，捆成一堆，以便我们可以在不同的地方重复使用这些操作，这就是编程的公式了。这样就不用每次干同样的事的时候，进行重复的细节工作。 

  比如说洗衣服吧，泡衣服，打肥皂，搓衣服，投净，拧干，这些每次洗衣服都要重复的事情，全被洗衣机变成一件事了，只要每次放进不同的衣服，再放进重量不同的洗衣粉，就可以让他去洗了，完了打开盖，洗好了。 

  这洗衣机就是我们的公式，洗的过程就是我们捆绑进去的各种每次都要重复的操作，洗衣机厂帮我们弄好了，而每次放进去的不同样的衣服，不同重量的洗衣粉，就是套公式用的参数了。 

  几个小公式可以组合成大公式。您要是工作，学习忙，没时间干家务，或者纯粹就是个懒字，请一位家务助理，得，家务助理用洗衣机，吸尘器，微波炉等等公式，再加上他自己的操作，组合，循环，把这些小公式捆绑起来，就成为一个大公式了。您每次交了钱，卫生就打扫了，饭也做好了，这家务助理做的工作，对于您来说，也就是一个更复杂的公式了，每次打电话预约，交钱就可以套用完成家务的公式了。 

  在程序里，公式的术语叫“函数”或者“方法”。我们定义一个函数，就是定义一条公式，用的时候，拿来参数a,b什么的，套一下公式就行了。 

  为了程序的结构清晰，我们往往会定义很多函数。把复杂的问题分成很多小问题，每个小问题放到一个函数里，然后在解决复杂问题的函数里，使用这些小问题函数解决大问题。更重要的是我们可以大量的使用别人写好的函数来解决自己的问题。 

  函数的作用是让程序结构清晰，而且可以在不同的地方重复套用。 

* 变量: 就是上面的a，b这种可以代表任何值，可以放进不定值的单词，变量，变量，他代表的量可能会改变。我们用变量来存储我们程序中用到的各种数字，文字，公式。所谓参数，就是定义公式时候用到的变量，就叫参数，换个马甲而已。 

换成术语，我们有：

=============================== ===== =========
数字 (number)                   =>      数字
字符串 (string)                 =>      文字
循环 (loop)                     =>      循环
函数／方法 (function/method)    =>      公式
变量 (variable)                 =>      变量
=============================== ===== =========

到这里，基本上编程就没什么可学得了。剩下的就是掌握各种编程语言特定的函数和循环的书写格式，再掌握了别人已经写好的函数的用法，组合起来就得了。 

基本编程
---------------

最基本的python程序::

  print("世界，您好！")
  return printed
  
存到易度软件包的python脚本编辑区，然后点击部署后的栏目链接，就可以看到结果了。

这里就用到了函数和字符串，在屏幕上输出一行::

  世界，您好！

Python 里函数的用法是：函数名(参数1, 参数2)

这里 print 是函数；打印内容到printed变量里面，"世界，您好！"是参数，套 print 这个公式用的。

学会怎么用函数了，再学会定义函数的格式，就差不多了。

Python 里注释符号是"#"。就是说，在 # 符号后的那一行文字，都当做解释，不做为程序的命令::

  print ("打酱油！") # print ("关我屁事")

只打印出 “打酱油”，剩下的，因为是在 # 后面，所以程序把他们当做注释语言自动忽略了。 

循环 (loop)
---------------------
当然还有循环，怎么让程序重复的做事？我们有 while(当...), for(对于...) 命令来进行循环控制::

    a = 0
    while a < 100:
       a = a + 1
       print (a)

这个循环说，当 a < 100 的时候，把 a 增加 1，再把他打印出来，然后重复。当 a 等于100了，条件不符合了，就结束了。

我们有 <, >, ==, <=, >=, != 来判断大于，小于，等于，小于等于，大于等于，不等于。

还有 and(并且), or(或者), not(不是) 来进行逻辑运算，所谓逻辑运算，就是测试多个不同判断之间的关系的：

    (a == 1) and (b != 2) 来测试这两个判断是否同时成立：a 等于 1 并且 b 不等于 2。 (a == 1) or (b != 2) 来测试这两个判断里是否有至少一个成立：a 等于 1 或者 b 不等于 2。 not a == 1 来测试这个判断是否是错的。错的就是对的，对的就是错的，颠倒黑白：不是 a 等于 1，那就是 a 不等于 1 了，好像有点脱裤子放屁。其实在别的更复杂的判断组合里更有用些。 

我们还有 break(中断) 来打断循环，和 continue(继续) 来立刻回到循环开始，也可以用 if(如果) 命令来进行判断::

    a = 0
    while True:
        a = a + 1
        if a >= 100:
            break
        print (a)

这里 True(正确) 表示永远正确，相对的是 False(错误) 表示永远错误。这一段是说一直执行，因为 while 的条件总是正确，就是说“当符合总是正确的条件的时候，不断重复”，当然是永远正确，永远重复了。下面在 if 处判断如果a大于等于100，如果是，那么执行 if 下的段落，这里我们打断了循环。如果条件不符，就跳过 if 下面的小段落，该干嘛干嘛，具体到这里就是打印 a 然后继续执行循环。

for 循环是利用下面介绍的的列表数据结构对列表进行循环。 

定义函数
--------------------
::

    def a_b_pingfang(a, b):
        c = a**2 + 2*a*b + b**2
        return c

我们定义一个(a+b)平方的函数，def 是英语 define 的缩写，意思是定义函数，定义公式。

1. 第 1 行就是说我们要定义一个函数名叫 a_b_pingfang 的函数，用他的时候，需要两个参 数 a 和 b。尾巴上有个冒号，冒号的意思是说：“下面的一段话就是公式定义了，要注意了”。

   计算机编程里，* 代表乘法，/代表除法，** 代表乘方， b**2 就是 b 的二次方。 

   注意： Python 是用 缩进空格 来表示段落的，冒号(:)来表示段落开始。

2. 第 2 行先缩进4个空格，说明下面缩进4格的，都是同一段落，用来具体计算上面定义的公式的。把 a2+2*a*b+b2 的计算结果，放到c里。

   c类似于a，b，都是表示一个变量，他可以用来存放数字，文字，甚至函数。这里他存放的是用a，b计算后得到的结果。因为不是在函数名里，所以术语叫做“变量”，用在函数名里，就叫参数了。

   “变量”就是用一个单词来代表一个可以变化的量的。单词里可以有字母，数字和下加线(_)，数字不能打头。

3. 第 3 行，把函数执行的结果，告诉使用者。这里把存在c里的结果，传回给函数的使用者。

   return 命令的意思，就是立即结束函数的执行，把return后面的值传给调用者，可以传回多个值。

   return 不是必需的，函数执行到最后一行，如果没有return，会自动结束。

   如果前面有 return ，则提前结束。

现在可以使用这个公式了，我们把套公式叫调用函数 ：

ping2 = a_b_pingfang(2, 3)

ping2 里存放了 a_b_pingfang(2, 3)得到的结果，也就是上面 return c 这句，把 c 的内容，传给了外面的ping2。

把结果打印出来：

print(ping2)

全部程序就是::

    def a_b_pingfang(a, b):
        c = a**2 + 2*a*b + b**2
        return c

    ping2 = a_b_pingfang(2, 3)
    print(ping2)

存到 test2.py ，跑 python test2.py 就可以看到输出 25。 


Python 数据概念
=========================
下面具体说到python特异功能，他有几个特殊的存储数据的格式。

* 列表: list
* 元组: tuple
* 字典: dict (dictionary)
* 集合: set 

列表 (list)
----------------------
列表：把很多变量存进一个列表里，叫列的意思，就因为他像列车一样，一节一节车厢，每厢放一个变量。格式为 b, c, 1, 3, 5, '葡萄', '葡萄皮儿'，可以看到，方括号里，可以放具体的数字，文字，也可以放变量，用逗号分隔。

这些内容是在固定位置上，可以通过他们的位置，来提取::

    alist = [1, 3, 5, '很傻', '葡萄', '葡萄皮儿', a, var1]
    print (alist[0]) # 打印 1
    print (alist[3]) # 打印 "很傻"

在 python里，次序是从0开始数的，开始是0，然后是1，2，3，4，5，所以上面的列表 alist的第一个内容，可以用alist[0]来提取，第二个用alist[1]来提取。就像年龄一样，一生下来是零岁，一年以后才是一岁，不是中国传统那样，生下来就一岁，那是虚岁。蟒蛇语言他只认准确的东西，不玩儿虚的::

   print (alist[4]) # 打印 '葡萄'

这里，我们可以介绍用 for 循环来访问这个列表里的所有内容::

    for me in alist:
        print (me)

上面这一段，打印所有alist里的内容。

这个循环是，对于列表 alist ，从 0 位置开始，访问他的每一个位置，把这个位置上的值， 放到 me 里，然后针对不同的 me 值，重复执行下面段落的内容。

in 表示 me 在 alist 里，也可以用来判断::

      if "葡萄" in alist:
         print ("葡萄在alist里！")

列表的内容是可以改变的，我们可以把第4个位置设为"很天真"::

    alist[3] = alist[3] + ' 很天真'
    print (alist[3]) # 打印 '很傻 很天真'

下面说道的元组的内容就不能改变了。 

元组 (tuple)
------------------------
元组：元组就是列表，但是他的内容是不能改变的，用圆括号()来表示。 他的内容只能一开始就设定。但是，元组和列表之间是可以用函数互相转变的，转成列表就可以改变内容，转回元组就不能改了。

元组是用圆括号来表示，所以叫元组嘛::

    atuple = (2, 3, "老子")
    alist = list(atuple) # 变成 [2, 3, "老子"]
    alist[0] = 0
    tuple2 = tuple(alist) # 变回 (0, 3, "老子")

在 python 里，字符串也是一种特殊的元组，也就是内容不可变的字符列表::

    txt = 'abcdefg'
    print(txt[1]) # 打印 b

字典 (dict)
---------------------
字典：字典就像一般的字典，一个字，一个解释，再一个字，再一个解释。用大括号表示::

    adict = {1: "我是解释",
      2: "我是解释2", 
      "我是3": 3, 
      "我是4": 4
      }

前面的字叫钥匙(key)或者索引，后面的解释，叫"值"。索引不能重复，必须是唯一的。

我们可以看到，前面的字，和后面的解释可以是数字，文字，还可以是函数或者元组。但是前面的字，不能是列表，因为列表内容是可变的，可变的东西都不能做索引。

我们用索引来提取，设定或者增加值，而不是用位置::

    adict[1] # "我是解释"
    adict["我是3"] # 3
    adict[1] = 2 # 设定新的值
    adict["新索引"] = "没头脑和不高兴" # 增加一个新索引和值

集合 (set)
-----------------
集合: 集合就是数学上用的集合，把一堆东西放到一起，类似列表，不同的地方是内容不重复，而且也没有次序。

aset = set([1, 2, 3, 2, 4, 6]) # 去掉重复内容，所以是 1,2,3,4,6

可以看出，建立一个集合的方式，是使用set()函数，函数的参数可以是列表，或者元祖，反正是一串儿的都可以。

集合的用处是利用他内容不可重复的特性，来去掉重复的内容。至于其他的合集，交集也是这个特性的延伸。

集合也是可以变成列表的，利用 list() 函数。

alist = list(aset) # 内容 [1,2,3,4,6]

模块 (module)
------------------------
Python 里包涵了很多别人写好的函数、方法让我们直接利用。譬如写网络程序的函数，数 学计算的函数，分析电邮文件的函数，加密的函数。我们要做的就是套公式！

这些函数分门别类的放到叫“模块”的东西里。一个模块里，包括很多功能相类的函数。而具体实现上，一个模块，就是一个python的程序文件。

如果模块还需要细分更多层，那么每层就是一个文件目录。里面有很多做为模块的python文件。

要使用模块，我们用“进口”这个命令: import::

    import time
    now = time.clock()
    print (now)

这里，我们先进口 time 模块，然后使用 time 模块里的函数 clock() ，得到当前时间，打印出来。

用个英文句点表示模块 time里的clock函数: 模块名.函数名

在 python 里，我们会用到很多别人写的模块，能自己少写点儿源码，尽量少写，懒不是？ 

模块限制
------------------
出于安全性的考虑，易度的python脚本运行在一个沙箱(sandbox)中，并不是所有的Python内置模块都可使用。

在易度开发平台中，可使用的包有：

- time
- random
- hashlib
- datetime 日期操作库
- time  时间操作库
- urllib2: 访问外部网络资源
- __builtins__ : 内置的函数及其他对象，列表如下::

    False', 'None', 'True', 'abs', 'basestring', 'bool', 'callable',
    'chr', 'cmp', 'complex', 'divmod', 'float', 'hash',
    'hex', 'id', 'int', 'isinstance', 'issubclass', 'len',
    'long', 'oct', 'ord', 'pow', 'range', 'repr', 'round',
    'str', 'tuple', 'unichr', 'unicode', 'xrange', 'zip'

字符串的对象性质
---------------------
Python 里的字符串，列表，元组，字典，他们本身都是面对对象的类，所以带有很多函数可以对自己进行操作，譬如::

   a = "脚不大好 头发没有 麻子".split()

split 是字符串这个类的函数，他可以把字符串在给定位置分割，当我们不给他参数的时候，会在所有空白位置分割，然后返回一个列表，里面是被割裂的字符串。

结果，a 的内容是 ["脚不大好", "头发没有", "麻子"]，这是一个有3个元素的列表。

对于字符串，列表，字典之类的操作，请熟读说明手册对他们的说明，python编程，主要就靠字符串，列表和字典了。 

Python 程序员编程习惯
===================================
重中之重: 大量的使用 list 这个列表方式来存储、操作数据。一字长蛇阵是蟒蛇的绝招，多用没错。

写一个 Python 程序，我们一般的步骤是：

1. 进口所有会用到到模块 import
2. 定义我们自己的类和函数。对于每个函数里要用到的函数，被调用的函数一般放在调用函数的前面定义。这样我们读程序的时候，如果从上到下，就知道调用的函数，在前面是怎么定义的，有什么功能，需要什么参数，返回什么值。
3. 在文件的最下面，调用上面定义的函数和类，开始工作。
#. 尽量使用 python提供的内建函数和模块里的函数，所以我们对Python的模块说明手册要很熟悉。
#. 程序的清晰比简洁重要，多写注释，表明自己下面要做什么。越清晰的程序越容易修改。否则十天半个月后您想给自己的程序加个新功能，结果根本看不懂原来的程序了，可怎么加？ 

Python 运行，是从文件的上面往下走的，看到一条命令执行一条命令，一直到最后一行。当我们定义函数和类的时候，他们只是定义，而没有执行，所以Python 看到他们，先存起来，直到看到定义外的具体命令，才真正的执行。如果这个命令调用上面的函数，那么就把存起来的函数执行一下。

完整例子
================

todo

参考资料
======================
更多的功能，函数，请到 `czug.org <http://czug.org/python/>`__
